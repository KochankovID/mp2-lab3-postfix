#pragma once
#include <string>

/*
Абстрактный класс операнд. По логике работы системы 
выражение разбивается на операнды 2-х различных типов:
операция и переменная, унаследнованные от класса операнд
*/

class operand
{
public:
	// Конструкторы ----------------------------------------------------------------------------------------
	operand(std::string str) :name(str) {};  // Инициализатор (привидения типа)
	operand(const operand& copy) :name(copy.name){}  // Конструктор копирования

	// Методы ----------------------------------------------------------------------------------------------
	// Чисто виртуальный метод получения типа потомка. Т.к. всего два вида потомков используется bool
	virtual bool getType() = 0;
	
	
	std::string getName() { return name; } // Получение имени операнда
	void setName(const std::string& str) { name = str; }  // Изменение имени операнда

	// Деструктор ------------------------------------------------------------------------------------------
	virtual ~operand() {};
private:
	// Поля ------------------------------------------------------------------------------------------------
	std::string name;  // Имя операнда
};

